// PROJECT_NAME is defined in settings.gradle

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'   // provides embedded tomcat 7 for testing purposes
apply plugin: 'signing'
apply plugin: 'maven'

group = "io.soluble.pjb"
archivesBaseName = 'php-java-bridge'
version = "6.2.11-SNAPSHOT"
description = "PHPJavaBridge server (soluble fork)"


ext {
    // Password to publish on maven - specify via command line with -P
    //snapshotRepoPass = project.hasProperty('snapshotRepoPass') ? project.getProperty('snapshotRepoPass') : ''
    //pomFile = file("${project.buildDir}/generated-pom.xml")
    //isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
}


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.5'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
        //classpath 'org.ajoberstar:gradle-git:1.6.0'
    }
}


compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    providedCompile('javax.servlet:servlet-api:2.5')
    runtime('log4j:log4j:1.2.17')
    testCompile('junit:junit:3.8.2')    // the test code still uses this junit API
    
    def tomcatVersion = '7.0.59'
    tomcat(
            "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
    )
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

// When testing you can specify your local PHP executable as a system property with
// -Dphp_exec=/path/to/php-executabale on the Gradle command line
// Default value is "php" which should work both on Linux and Windows for most standard PHP installations.
if (System.getProperty('php_exec') == null) {
    ant.properties['php_exec'] = 'php'
}

ant.importBuild 'build.xml'

jar {
    //baseName = "${project.archivesBaseName}-standalone"
    manifest {
        attributes('Main-Class': 'io.soluble.pjb.bridge.Standalone')
    }
}

war {
    dependsOn jar
    //baseName "${project.archivesBaseName}-template"
    //from 'src/rootContent' // could add a file-set to the root of the archive
}



tomcatRun {
    contextPath = '/'
    httpPort = 8090;
    outputFile = file('./tomcat.log')
//    httpsPort = 8091
//    enableSSL = true
    daemon = true
}

jacocoTestReport {
    group = 'Reporting'
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/reports/coverage"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourcesJar, jar
}

configure(rootProject) {

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew and gradlew.bat scripts'
        gradleVersion = '3.3'
        //jarFile = "${project.projectDir}/.infra/gradle/gradle-wrapper.jar"
    }

}

uploadArchives {
    repositories {
        mavenDeployer {


            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            ossrhUsername = project.properties.ossrhUsername
            ossrhPassword = project.properties.ossrhPassword

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }


            pom.project {
                name project.name
                description project.description
                packaging 'jar'
                url 'https://github.com/belgattitude/php-java-bridge'

                scm {
                    connection 'scm:git:git://github.com/belgattitude/php-java-bridge.git'
                    developerConnection 'scm:git:git://github.com/belgattitude/php-java-bridge.git'
                    url 'https://github.com/belgattitude/php-java-bridge'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'belgattitude'
                        name = 'Sébastien Vanvelthem'
                        email = 'belgattitude@gmail.com'
                    }
                    developer {
                        name = 'Christian P. Lerch'
                        email = 'christian.p.lerch@gmail.com'
                        organization = 'km-works.eu'
                        organizationUrl = 'https://github.com/km-works'
                    }

                }
            }


        }
    }
}

/*
if (project.hasProperty('release')) {

    subprojects {

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }
    }

    allprojects {
        apply plugin: 'signing'
        apply plugin: 'maven'

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository

                    if (project.ext.isReleaseVersion) {
                        url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    } else {
                        url 'https://oss.sonatype.org/content/repositories/snapshots/'
                    }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUser, password: ossrhPassword)
                    }
                    pom.project {
                        name project.name
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/belgattitude/php-java-bridge'

                        scm {
                            connection 'scm:git:git://github.com/belgattitude/php-java-bridge.git'
                            developerConnection 'scm:git:git://github.com/belgattitude/php-java-bridge.git'
                            url 'https://github.com/belgattitude/php-java-bridge'
                        }

                        licenses {
                            license {
                                name 'The MIT License (MIT)'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'belgattitude'
                                name = 'Sébastien Vanvelthem'
                                email = 'belgattitude@gmail.com'
                            }
                            developer {
                                name = 'Christian P. Lerch'
                                email = 'christian.p.lerch@gmail.com'
                                organization = 'km-works.eu'
                                organizationUrl = 'https://github.com/km-works'
                            }

                        }
                    }
                }
            }
        }

    }
}

nexusStaging {
    username = ossrhUser
    password = ossrhPassword
}

*/
/*
publishing {
    repositories {
        maven {
            if (project.ext.isReleaseVersion) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            } else {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            }
            credentials {
                username = project.properties.ossrhUsername
                password = project.properties.ossrhPassword
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {

            from components.java

            // Add those artifacts to the publication
            artifact sourcesJar
            artifact javadocJar

            // Add license
            tasks.withType(Jar) {
                from(project.projectDir) {
                    include 'LICENSE.md'
                    into 'META-INF'
                }
            }

            // Define the library info (pom)
            
            pom.withXml {
                asNode().with {
                    appendNode('packaging', 'jar')
                    appendNode('name', 'PHPJavaBridge')
                    appendNode('description', 'PHPJavaBridge server (soluble fork)')
                    appendNode('url', 'https://github.com/belgattitude/php-java-bridge')
                    appendNode('scm').with {
                        appendNode('url', 'https://github.com/belgattitude/php-java-bridge')
                        appendNode('connection', 'scm:git:git://github.com/belgattitude/php-java-bridge.git')
                    }
                    appendNode('issueManagement').with {
                        appendNode('url', 'https://github.com/belgattitude/php-java-bridge/issues')
                        appendNode('system', 'GitHub')
                    }
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'The MIT License (MIT)')
                            appendNode('url', 'https://opensource.org/licenses/MIT')
                        }
                    }
                    appendNode('organization').with {
                        appendNode('name', 'Soluble')
                        appendNode('url', 'http://soluble.io')
                    }
                    appendNode('developers').with {
                        appendNode('developer').with {
                            appendNode('name', 'Sébastien Vanvelthem')
                            appendNode('email', 'belgattitude@gmail.com')
                            appendNode('organization', 'Soluble')
                            appendNode('organizationUrl', 'https://github.com/belgattitude')
                            appendNode('timezone', '1')
                        }
                        appendNode('developer').with {
                            appendNode('name', 'Christian P. Lerch')
                            appendNode('email', 'christian.p.lerch@gmail.com')
                            appendNode('organization', 'km-works.eu')
                            appendNode('organizationUrl', 'https://github.com/km-works')
                            appendNode('timezone', '1')
                        }

                    }
                }
            }
            
            // Signing

            if (signing.required) {
                // Sign the pom.xml.
                pom.withXml {
                    writeTo(project.ext.pomFile)
                    def pomAscFile = signing.sign(project.ext.pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    project.ext.pomFile.delete()
                }

                // Sign the artifacts.
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}
*/
/*
githubPages {
    repoUri = 'git@github.com:belgattitude/php-java-bridge.git'

    pages {
        from(javadoc.outputs.files) {
            into 'docs/javadoc'
        }
        from(groovydoc.outputs.files) {
            into 'docs/groovydoc'
        }
    }
}*/
